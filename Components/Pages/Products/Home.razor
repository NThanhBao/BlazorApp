@page "/products"
@rendermode InteractiveServer
@using BlazorApp_Auth.Models
@using BlazorApp_Auth.Services
@inject IProductService ProductService
@using DevExpress.Blazor
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage SessionStorage

<PageTitle>Danh Sách Sản Phẩm</PageTitle>

<div style="display: flex; justify-content: space-between; align-items: center;">
    <h3>Danh Sách Sản Phẩm</h3>
    <div>
        <DxButton ButtonType="DevExpress.Blazor.ButtonType.Secondary" Text="Thêm" @onclick="AddProduct" />
        <DxButton ButtonType="DevExpress.Blazor.ButtonType.Secondary" Text="Sửa" @onclick="EditProduct"
            Disabled="@(!isProductSelected || !isAdmin)" />
        <DxButton ButtonType="DevExpress.Blazor.ButtonType.Secondary" Text="Xóa" @onclick="DeleteProduct"
            Disabled="@(!isProductSelected || !isAdmin)" />
    </div>
</div>

@if (products == null)
{
    <p>Đang tải dữ liệu...</p>
}
else
{
    <DxGrid Data="@products" PageSize="15" ColumnResizeMode="GridColumnResizeMode.NextColumn" TextWrapEnabled="false"
        SelectionMode="GridSelectionMode.Single" RowClick="OnRowClick" AllowSelectRowByClick="true"
        HighlightRowOnHover="true">
        <Columns>
            <DxGridDataColumn FieldName="Name" Caption="Tên Sản Phẩm" MinWidth="150" />
            <DxGridDataColumn FieldName="Description" Caption="Mô Tả" Width="30%" />
            <DxGridDataColumn FieldName="Price" Caption="Giá" Width="15%" DisplayFormat="{0:C}" />
            <DxGridDataColumn FieldName="CreatedAt" Caption="Ngày Tạo" Width="15%" DisplayFormat="dd/MM/yyyy" />
            <DxGridDataColumn FieldName="Quantity" Caption="Số Lượng" Width="10%" />
        </Columns>
    </DxGrid>
}

@if (!string.IsNullOrEmpty(adminMessage))
{
    <p style="color: red;">@adminMessage</p>
}

@code {
    private List<Products> products;
    private Products selectedProduct;
    private bool isProductSelected => selectedProduct != null;
    private bool isAdmin = false;
    private string adminMessage = "";

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetAllProductsAsync();
    }

    private void AddProduct()
    {
        NavigationManager.NavigateTo("/products/create-product");
    }

    private async Task EditProduct()
    {
        if (selectedProduct != null && isAdmin)
        {
            NavigationManager.NavigateTo($"/products/edit-product/{selectedProduct.Id}");
        }
        else
        {
            adminMessage = "Bạn không phải là admin!";
            StateHasChanged();
        }
    }

    private void DeleteProduct()
    {
        if (selectedProduct != null && isAdmin)
        {
            NavigationManager.NavigateTo($"/products/delete-product/{selectedProduct.Id}");
        }
        else
        {
            adminMessage = "Bạn không phải là admin!";
            StateHasChanged();
        }
    }

    private void OnRowClick(GridRowClickEventArgs e)
    {
        int visibleIndex = e.VisibleIndex;
        selectedProduct = products.ElementAtOrDefault(visibleIndex);

        if (selectedProduct != null)
        {
            Console.WriteLine($"Sản phẩm được chọn: {selectedProduct.Name}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedRoleResult = await SessionStorage.GetAsync<string>("UserRole");

            if (storedRoleResult.Success && storedRoleResult.Value == "ADMIN")
            {
                isAdmin = true;
            }

            StateHasChanged();
        }
    }
}
