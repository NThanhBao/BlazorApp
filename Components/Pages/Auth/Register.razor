@page "/auth/register"
@using BlazorApp_Auth.Models
@using BlazorApp_Auth.Services
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="card cw-480">
    <EditForm Model="newUser" OnValidSubmit="HandleRegister" OnInvalidSubmit="HandleInvalidSubmit"
        Context="EditFormContext">
        <DataAnnotationsValidator />

        <div class="card-header text-center py-3">
            <h4>Register</h4>
            <p class="tm-8 mb-0 fw-normal fs-825">
                Create a new account to see it in action
            </p>
        </div>
        <p class="alert alert-danger">@FormSubmitResult</p>
        <div class="card-body">
            <DxFormLayout>
                <DxFormLayoutItem ColSpanMd="12">
                    <label for="tbUsername" class="d-none">Username</label>
                    <DxTextBox @bind-Text="newUser.Username" NullText="Username"
                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" InputId="tbUsername" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => newUser.Username)" />
                    </div>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12">
                    <label for="tbPassword" class="d-none">Password</label>
                    <DxTextBox @bind-Text="newUser.PasswordHash" NullText="Password" Password="true"
                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" InputId="tbPassword" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => newUser.PasswordHash)" />
                    </div>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12">
                    <label for="tbEmail" class="d-none">E-mail</label>
                    <DxTextBox @bind-Text="newUser.Email" NullText="E-mail"
                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" InputId="tbEmail" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => newUser.Email)" />
                    </div>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12">
                    <label for="miPhone" class="d-none">Phone Number</label>
                    <DxMaskedInput @bind-Value="newUser.PhoneNumber" NullText="Phone Number" Mask="(999) 000-0000"
                        ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" InputId="miPhone" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => newUser.PhoneNumber)" />
                    </div>
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12">
                    <DxButton CssClass="w-100" RenderStyle="ButtonRenderStyle.Primary" SubmitFormOnClick="true"
                        Text="Register" />
                </DxFormLayoutItem>

                <DxFormLayoutItem ColSpanMd="12">
                    <div class="text-center pt-2">
                        <div class="tm-8">
                            Already have an account?
                        </div>
                        <DxButton RenderStyle="ButtonRenderStyle.Link" Text="Login" Click="NavigateToLogin" />
                    </div>
                </DxFormLayoutItem>
            </DxFormLayout>
        </div>
    </EditForm>
</div>



@code {
    private Users newUser = new Users();
    private string FormSubmitResult = "";

    private async Task HandleRegister()
    {
        try
        {
            await AuthService.RegisterAsync(newUser.Username, newUser.PasswordHash, newUser.Email, newUser.PhoneNumber);
            FormSubmitResult = "You have been registered successfully.";
            NavigationManager.NavigateTo("/auth/login");
        }
        catch (Exception ex)
        {
            if (ex.Message == "Username already exists.")
            {
                FormSubmitResult = ex.Message;
            }
            else
            {
                FormSubmitResult = "Registration failed. Please try again.";
            }
        }
    }

    private void HandleInvalidSubmit()
    {
        FormSubmitResult = "Please correct the errors and try again.";
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/auth/login");
    }
}
