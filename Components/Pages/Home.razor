@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using DevExpress.Blazor
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage
<PageTitle>Home</PageTitle>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Hãy bắt đầu với ứng dụng của bạn!</p>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <DxToast Show="@true" Message="@successMessage" Type="DevExpress.Blazor.ToastMessageType.Success" />
    }

    @if (isUserLoggedIn)
    {
        <p>Chào mừng @username!</p>
        <p>Bạn là @userRole.</p>

        <DxButton ButtonType="DevExpress.Blazor.ButtonType.Danger" Text="Đăng Xuất" @onclick="Logout" />

        <DxButton ButtonType="DevExpress.Blazor.ButtonType.Secondary" Text="Xem Sản Phẩm" @onclick="NavigateToProducts" />
    }
    else
    {
        <div>
            <DxButton ButtonType="DevExpress.Blazor.ButtonType.Primary" Text="Đăng Nhập" @onclick="NavigateToLogin" />
            <DxButton ButtonType="DevExpress.Blazor.ButtonType.Secondary" Text="Đăng Ký" @onclick="NavigateToRegister" />
        </div>
    }
</div>

@code {
    private bool isUserLoggedIn;
    private string username;
    private string userRole;
    private string successMessage;

    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isUserLoggedIn = user.Identity.IsAuthenticated;

        if (isUserLoggedIn)
        {
            username = user.Identity.Name;
            userRole = user.FindFirst(c => c.Type == "UserRole")?.Value ?? "User";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var storedUsernameResult = await SessionStorage.GetAsync<string>("Username");
            var storedRoleResult = await SessionStorage.GetAsync<string>("UserRole");

            if (storedUsernameResult.Success && !string.IsNullOrEmpty(storedUsernameResult.Value))
            {
                isUserLoggedIn = true;
                username = storedUsernameResult.Value;

                if (storedRoleResult.Success && !string.IsNullOrEmpty(storedRoleResult.Value))
                {
                    userRole = storedRoleResult.Value;
                }

                StateHasChanged();
            }
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/auth/login");
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/auth/register");
    }

    private void NavigateToProducts()
    {
        NavigationManager.NavigateTo("/Product/Index");
    }

    private async Task Logout()
    {
        await SessionStorage.DeleteAsync("Username");
        await SessionStorage.DeleteAsync("UserRole");

        isUserLoggedIn = false;
        username = null;
        userRole = null;

        NavigationManager.NavigateTo("/");
    }
}
